using System.IO;
using Amazon.IdentityManagement.Model;
using Amazon.StorageGateway.Model;
using Newtonsoft.Json;
using PITB.CMS_Common.Handler.Authentication;
using PITB.CMS_Common.Handler.Complaint.Assignment;
using PITB.CMS_Common.Handler.FileUpload;
using PITB.CMS_Common.Handler.Messages;
using PITB.CMS_Common.Handler.Permission;
using PITB.CMS_Common.Helper.Database;
using PITB.CMS_Common.Models.Custom;
using PITB.CMS_Common.Models.View;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Security.Cryptography.Pkcs;
using System.Web;
using PITB.CMS_Common.Models.View.Table;
using PITB.CMS_Common.Handler.Business;
using System.Text;
using System.Net;
using System.Threading;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data;
using PITB.CMS_Common.Models;
using PITB.CMS_Models.Custom;
using PITB.CMS_Models.View;

namespace PITB.CMS_Handlers.Complaint
{
    public class SchoolEducatonStatusHandler
    {
        public static CMSCookie cookie;
        private static void RealStart(VmStatusChange vmStatusChange)
        {
            FileUploadHandler.FileValidationStatus s = ChangeStatus(vmStatusChange, null);
        }

        public static bool ChangeStatusBulk()
        {

            int[] ilist = new int[] { 486204, 450729, 448739, 448616, 499976, 494463, 498367, 498270, 454303, 451985, 451738, 445362, 445274, 445269, 445266, 445103, 444904, 444303, 444302, 444246, 443729, 443727, 443697, 443694, 443334, 442922, 438411, 438388, 437373, 437352, 436824, 436640, 436608, 436539, 436193, 435519, 435508, 435078, 435062, 434797, 434472, 433921, 433704, 433281, 433113, 433095, 432644, 432561, 432560, 432559, 432219, 432044, 432043, 432042, 431497, 431496, 431411, 431349, 431341, 431288, 430899, 430706, 430705, 430700, 430677, 430580, 430557, 430518, 430488, 430484, 430467, 430466, 430448, 430390, 430231, 429697, 429671, 429609, 429581, 429562, 429088, 429061, 429054, 429045, 429032, 428980, 428901, 428895, 428789, 428425, 428419, 428299, 428298, 428292, 428246, 428161, 428119, 427860, 427843, 424214, 497118, 496593, 494270, 493053, 492071, 486578, 483739, 483553, 482703, 494020, 484211, 484201, 482154, 452345, 445293, 444341, 443080, 439414, 439396, 439395, 439394, 439243, 439235, 439229, 433523, 433175, 432983, 427331, 468112, 462435, 461858, 457409, 453933, 453865, 452494, 452350, 451594, 450903, 450893, 450618, 450592, 450591, 450590, 449349, 490804, 449345, 448520, 445142, 444412, 443765, 443760, 443747, 443719, 443257, 436064, 436015, 435941, 434159, 433738, 433690, 433630, 433603, 433602, 433599, 433582, 433581, 433511, 432955, 432587, 432508, 432400, 432320, 432260, 432154, 431993, 431923, 431187, 430833, 429320, 428499, 428498, 428366, 490701, 488540, 482920, 482591, 482514, 482513, 482509, 482502, 482498, 482485, 482483, 482475, 482474, 482473, 482470, 482469, 482405, 481700, 491558, 490431, 446913, 436735, 436400, 436344, 436339, 490970, 489949, 489480, 485304, 482980, 480127, 473429, 468294, 454828, 454006, 453758, 486565, 485432, 485397, 485396, 485395, 485394, 483867, 483610, 483561, 483547, 483515, 483362, 483351, 482353, 482258, 481915, 481689, 481449, 477847, 477816, 477353, 477333, 477325, 477320, 477308, 477302, 477292, 468887, 454032, 453342, 453327, 453318, 452979, 452061, 451650, 451049, 451046, 451044, 447316, 446013, 444496, 444276, 443844, 441308, 437809, 437041, 437014, 437002, 436366, 436358, 434288, 433481, 433446, 433197, 433194, 433119, 432996, 432895, 432549, 432548, 432531, 432176, 431794, 431161, 431123, 431122, 430422, 429900, 429666, 428896, 428621, 428469, 428244, 487574, 443660, 486425, 485523, 485187, 482159, 478717, 484667, 483502, 482706, 481724, 484413, 484369, 478997, 483506, 483459, 483449, 483446, 483075, 482429, 482069, 481948, 481675, 481586, 481532, 481453, 481392, 461273, 444382, 444359, 483489, 483460, 483323, 482916, 482534, 482512, 482179, 481434, 479122, 478992, 477662, 476282, 476261, 476259, 476248, 474448, 474446, 474445, 474210, 474202, 481480, 481478, 481447, 481431, 481421, 481419, 481403, 481389, 481368, 480184, 475252, 474667, 474453, 463375, 455293, 453067, 480769, 480618, 480351, 479478, 476256, 474455, 474186, 477546, 476506, 476309, 476284, 476276, 476269, 476268, 476188, 461869, 461868, 457367, 474452, 474444, 470806, 466977, 455994, 455958, 467541, 464554, 463441, 461519, 457388, 455496, 454787, 454753, 452705, 451747, 451746, 451724, 451705, 451666, 451646, 451538, 460962, 458266, 456887, 459357, 458822, 457381, 457116, 457114, 456850, 456841, 456299, 456298, 456297, 456006, 455659, 455457, 455452, 455446, 455440, 455439, 455050, 454973, 454936, 454924, 454889, 454349, 456289, 456288, 454752, 454685, 455723, 455631, 455159, 455059, 454409, 454324, 454262, 454159, 454080, 454079, 453877, 453781, 453774, 453717, 453511, 452176, 452175, 453839, 454772, 453366, 451735, 451710, 454643, 454389, 454373, 454323, 454302, 454128, 453911, 453887, 453817, 453800, 453656, 453655, 453654, 453653, 453652, 453387, 453360, 452239, 452107, 452086, 452083, 454298, 454228, 454200, 454198, 454122, 454058, 453957, 453936, 453922, 453909, 453908, 453907, 453905, 453901, 453852, 453830, 453825, 453824, 453821, 453812, 453810, 453736, 453730, 453729, 453724, 453378, 453377, 453376, 453373, 452678, 452677, 452675, 452565, 452551, 453741, 453732, 453642, 453625, 453514, 453494, 453385, 453369, 453332, 453299, 453289, 452856, 452759, 452707, 452698, 452669, 452668, 452112, 451932, 451812, 451720, 451716, 451707, 451703, 451701, 451630, 451577, 451084, 451055, 451045, 447979, 444390, 453225, 453224, 453130, 452718, 452697, 452601, 452576, 452560, 452466, 452339, 452288, 452210, 452161, 452151, 451891, 451792, 451759, 451687, 451686, 451684, 451676, 451574, 451540, 451094, 451057, 451009, 450347, 450204, 452517, 452179, 451904, 451722, 451721, 451718, 451715, 451711, 451554, 450141, 449692, 449396, 448865, 447909, 447121, 446559, 445087, 444674, 452054, 451940, 451853, 451844, 451791, 451789, 451757, 451756, 451755, 451754, 451714, 451713, 451712, 451685, 451595, 451560, 451513, 451505, 451451, 451429, 451375, 451043, 450640, 450620, 451479, 451341, 451068, 451063, 451062, 451061, 451060, 451042, 451041, 451040, 451039, 451036, 451030, 451028, 451027, 445965, 430298, 450519, 450286, 450285, 450284, 450266, 450216, 450214, 450206, 450205, 450203, 450195, 449736, 449729, 449720, 449715, 449704, 449577, 449484, 449393, 448554, 448546, 444578, 444159, 443793, 450294, 450229, 450003, 449637, 449610, 449537, 447094, 446681, 446008, 445976, 445358, 445357, 445095, 445094, 445092, 445081, 445078, 445073, 445071, 445067, 445065, 445063, 444797, 444781, 444775, 444755, 449324, 445319, 444476, 444467, 444460, 444451, 444446, 444420, 444413, 444353, 444203, 443823, 443816, 443792, 443724, 443696, 443615, 443590, 443474, 443450, 443441, 443439, 443379, 443346, 443339, 443325, 443309, 442934, 442497, 439926, 448628, 447134, 447072, 436923, 433530, 430697, 448566, 448129, 448065, 447946, 447938, 447937, 447935, 447880, 447512, 445345, 445344, 445331, 445109, 445107, 444455, 444223, 444156, 443711, 443710, 443676, 441931, 440658, 439529, 439372, 439096, 438918, 438590, 437781, 435947, 435908, 435516, 435427, 435241, 435233, 434137, 433588, 432496, 431837, 431836, 431835, 431106, 430734, 430333, 430328, 429586, 428871, 428856, 428704, 428669, 428576, 428559, 428416, 428406, 428381, 428278, 427978, 427942, 447627, 447617, 447591, 447414, 447357, 447284, 447282, 446957, 446684, 446548, 446022, 445993, 445674, 445653, 445489, 445353, 445351, 445262, 445096, 445046, 445044, 445026, 445000, 444987, 444871, 444864, 444854, 444848, 444829, 444826, 444819, 444752, 444737, 444580, 444554, 444449, 444346, 444342, 444306, 444269, 444202, 444123, 444072, 443819, 443706, 443695, 443640, 443618, 443614, 443550, 443549, 443414, 443361, 442148, 442017, 439628, 439500, 439460, 439249, 439064, 437919, 436288, 436126, 435972, 435805, 435520, 435470, 435226, 435171, 434897, 434762, 434758, 434685, 434187, 434128, 434127, 434126, 434125, 434124, 434123, 434122, 434121, 434120, 434119, 434107, 433777, 433764, 433565, 433482, 433294, 433270, 433157, 433107, 433023, 432957, 432787, 432775, 432673, 431861, 446986, 446890, 446757, 446723, 446722, 446721, 446720, 446719, 446718, 446717, 446716, 446715, 446714, 446713, 446712, 446711, 446710, 446709, 446656, 446493, 446057, 446047, 445815, 445711, 445352, 445304, 445303, 445301, 445295, 445261, 445252, 445031, 444811, 444504, 444471, 444468, 444463, 444454, 444429, 444384, 444380, 444323, 444320, 444311, 444286, 444165, 444153, 444142, 443973, 443952, 443834, 443803, 443800, 443799, 443798, 443781, 443780, 443775, 443736, 443668, 443650, 443597, 443589, 443555, 443533, 443525, 443515, 443506, 443487, 443432, 438164, 437980, 437902, 437880, 437867, 437802, 436403, 436384, 435419, 435189, 435096, 434949, 434935, 434787, 433857, 433735, 433728, 433707, 433680, 433667, 433579, 433551, 433491, 433430, 433413, 433112, 433006, 432992, 432969, 432946, 432911, 432884, 432883, 432767, 432716, 432691, 432217, 432210, 431970, 431746, 431728, 431610, 431594, 431472, 431459, 431458, 431456, 431450, 431415, 431310, 431297, 431228, 431204, 431174, 431058, 431007, 430746, 430728, 430716, 430533, 430491, 446677, 446676, 446675, 446565, 446530, 446075, 446052, 446030, 445999, 445958, 445829, 445709, 445597, 445497, 445486, 445469, 445375, 445369, 445361, 445359, 445347, 445342, 445326, 445324, 445323, 445318, 445264, 445208, 445115, 445113, 445085, 445077, 445074, 445028, 444995, 444933, 444929, 444896, 444889, 444888, 444880, 444731, 444726, 444725, 444724, 444723, 444722, 444721, 444696, 444676, 444615, 444568, 444536, 444503, 444501, 444498, 444485, 444480, 444461, 444438, 444433, 444427, 444426, 444416, 444406, 444394, 444385, 444378, 444377, 444367, 444332, 444314, 444310, 444307, 444284, 444274, 444273, 444141, 444127, 444121, 444116, 444062, 444045, 444044, 444031, 444005, 444004, 443994, 443955, 443934, 443891, 443831, 443814, 443801, 443787, 443786, 443755, 443746, 443745, 443740, 443735, 443730, 443728, 443723, 443721, 443715, 443707, 443703, 443688, 443683, 443681, 443680, 443674, 443670, 443642, 443608, 443594, 443574, 443545, 443535, 443463, 443435, 443356, 443347, 443335, 443330, 443321, 443198, 443197, 443181, 440637, 440635, 440632, 440631, 434778, 433732, 433718, 432976, 432847, 432509, 432257, 432218, 430490, 430487, 430476, 430457, 430402, 430236, 430189, 430138, 430137, 429950, 429776, 429729, 429684, 429362, 429349, 429327, 429259, 428988, 428983, 428956, 428637, 445568, 445498, 445492, 445403, 445372, 445281, 445280, 445147, 445140, 445104, 445102, 445093, 445045, 445039, 444997, 444923, 444902, 444825, 444444, 444432, 444388, 444327, 444157, 444073, 444069, 443971, 445247, 445217, 445198, 445197, 445127, 445126, 445125, 445123, 445122, 445084, 445009, 444969, 444937, 444891, 444796, 444763, 444452, 444324, 444017, 442578, 439715, 438503, 438367, 438364, 438294, 428624, 428612, 428224, 428220, 428216, 428150, 427930, 427825, 427794, 424494, 424199, 423771, 423751, 419787, 444857, 444699, 444680, 444673, 444625, 444601, 444553, 444544, 444531, 444523, 444497, 444495, 444492, 444490, 444445, 444439, 444399, 444397, 444396, 444393, 444386, 444379, 444376, 444351, 444340, 444334, 444279, 444262, 444234, 444213, 444183, 444179, 444129, 444110, 444071, 443877, 443810, 443809, 443806, 443764, 443738, 443690, 443635, 443602, 443579, 443554, 443541, 443505, 443459, 443452, 443364, 443333, 443185, 442889, 439467, 438859, 437577, 437109, 436773, 436636, 435939, 435583, 435338, 434957, 434628, 434138, 430877, 428698, 444361, 444352, 444344, 444283, 444281, 444255, 444253, 444148, 444132, 444120, 444079, 444051, 443991, 443987, 443986, 443968, 443964, 443963, 443961, 443942, 443937, 443930, 443924, 443885, 443828, 443818, 443796, 443794, 443789, 443788, 443776, 443773, 443772, 443771, 443769, 443762, 443761, 443757, 443756, 443754, 443752, 443744, 443737, 443734, 443733, 443722, 443718, 443717, 443705, 443692, 443684, 443682, 443672, 443653, 443639, 443636, 443628, 443627, 443621, 443619, 443611, 443610, 443606, 443599, 443582, 443577, 443569, 443568, 443560, 443544, 443542, 443529, 443528, 443522, 443517, 443514, 443503, 443488, 443465, 443461, 443453, 443448, 443436, 443429, 443422, 443421, 443408, 443350, 443342, 443338, 443337, 443331, 443323, 443314, 443307, 443269, 443236, 443201, 443115, 442945, 442943, 442826, 440460, 440443, 440244, 440233, 440221, 440063, 439382, 439021, 438993, 438914, 436803, 436414, 436412, 436409, 435366, 443617, 443571, 443567, 443485, 443470, 443444, 443381, 443365, 443357, 443316, 443312, 443276, 443270, 443245, 443222, 443203, 443193, 443104, 443083, 443052, 443046, 443020, 442973, 442971, 442937, 442928, 442925, 442667, 442626, 442095, 441278, 440653, 438713, 438708, 438379, 438258, 438215, 437747, 442031, 442028, 441981, 441974, 440304, 440303, 440256, 440101, 439890, 439543, 439429, 439107, 438985, 438936, 438692, 438462, 438461, 438406, 438383, 438211, 438204, 438203, 438173, 437913, 437877, 437709, 437663, 437407, 437152, 437123, 437122, 437074, 441552, 441078, 440650, 440647, 440644, 440552, 440527, 440295, 440118, 439833, 439522, 439498, 439492, 439397, 438707, 436428, 436037, 435672, 435563, 435560, 435536, 435469, 435436, 435431, 435194, 434948, 433429, 433423, 432469, 432214, 431968, 431327, 431326, 431325, 431083, 430638, 430636, 440592, 440542, 440286, 440201, 439932, 439832, 439746, 439548, 439541, 439530, 439527, 439526, 439525, 439523, 439511, 439506, 439491, 439490, 439489, 439486, 439485, 439484, 439483, 439482, 439481, 439480, 439479, 439478, 439477, 439476, 439475, 439474, 439473, 439472, 439471, 439470, 439469, 439461, 439458, 439456, 439455, 439453, 439442, 439438, 439430, 439422, 439377, 439374, 439363, 439356, 439349, 439345, 439339, 439322, 439312, 439154, 439152, 439098, 438992, 438966, 438965, 438955, 438920, 438889, 438872, 438457, 438384, 438272, 438199, 437900, 437888, 437887, 437604, 437140, 436738, 436627, 436609, 436419, 436404, 436371, 436272, 436215, 436196, 436036, 435853, 435738, 435734, 435695, 435689, 435644, 435564, 435543, 435541, 435488, 435486, 435478, 435473, 435468, 435457, 435437, 435291, 434199, 433591, 432863, 432394, 432267, 432216, 432201, 432197, 432193, 431898, 431897, 431896, 431742, 431485, 431429, 431382, 431097, 431059, 431024, 430486, 430289, 429778, 429766, 429763, 429679, 428668, 428268, 428158, 426309, 422062, 421089, 419876, 439437, 439434, 439428, 439368, 439130, 437483, 437470, 437056, 437049, 437036, 437004, 436549, 436405, 436395, 436394, 436393, 436380, 436369, 436368, 436365, 436364, 436346, 436325, 436296, 436294, 436291, 436229, 436222, 436195, 436187, 436179, 436140, 436101, 435864, 435316, 435139, 439124, 439116, 439079, 438805, 438797, 438796, 438779, 438602, 438586, 438581, 438260, 438259, 438225, 438216, 438159, 438150, 438135, 438131, 438127, 438126, 438125, 438065, 437926, 437921, 437914, 437911, 437904, 437896, 437882, 437875, 437868, 437864, 437844, 437843, 437842, 437838, 437783, 437684, 437590, 437559, 437510, 437457, 437451, 437437, 437432, 437389, 437381, 437349, 437344, 437297, 437251, 437240, 437139, 437136, 437130, 437111, 437081, 437017, 437000, 436669, 436411, 436408, 436407, 436406, 436402, 436383, 436377, 436280, 436185, 436136, 436052, 435911, 435904, 435879, 435874, 435784, 435777, 435677, 435630, 435613, 435606, 435605, 435588, 435586, 435585, 435584, 435555, 435532, 435515, 435503, 435466, 435411, 435408, 435343, 435268, 435126, 435091, 435011, 434968, 434818, 434806, 434805, 434804, 434798, 434545, 434143, 434048, 434002, 433790, 433730, 433382, 433245, 433156, 433013, 433002, 432972, 432971, 432660, 432010, 430440, 430336, 429447, 438196, 438182, 438169, 438162, 438069, 437901, 437899, 437884, 437874, 437873, 437859, 437854, 437848, 437825, 437812, 437797, 437796, 437698, 437603, 437235, 437149, 437129, 437032, 437022, 437019, 436970, 436909, 436892, 436829, 436825, 436360, 435733, 434489, 433538, 433467, 433466, 432804, 432387, 430532, 430330, 430317, 430306, 429721, 429457, 428768, 428599, 428247, 437588, 437587, 437585, 437546, 437545, 437527, 437478, 437446, 437395, 437351, 437346, 437345, 437343, 437342, 437339, 437334, 437327, 437317, 437291, 437285, 437274, 437259, 437234, 437201, 437200, 437199, 437198, 437197, 437196, 437195, 437188, 437176, 437175, 437142, 437141, 437134, 437133, 437131, 437128, 437126, 437119, 437118, 437113, 437112, 437108, 437107, 437104, 437101, 437097, 437082, 437080, 437077, 437072, 437065, 437052, 437039, 437038, 437035, 437034, 437033, 437031, 437028, 437018, 437015, 437010, 436982, 436981, 436949, 436945, 436937, 436897, 436866, 436845, 436843, 436841, 436840, 436839, 436837, 436835, 436834, 436827, 436819, 436818, 436816, 436815, 436814, 436813, 436812, 436811, 436810, 436809, 436710, 436615, 436386, 436362, 436354, 436353, 436352, 436343, 436315, 436218, 436154, 435929, 435926, 435921, 435906, 435902, 435770, 435553, 435540, 435250, 434174, 433967, 433769, 433597, 433584, 433524, 433522, 433516, 433311, 433196, 432090, 431880, 431699, 431653, 431568, 431477, 431464, 431316, 431236, 431224, 431215, 430956, 430703, 430691, 430660, 430655, 430569, 430493, 430345, 430257, 430044, 429510, 429406, 429389, 429306, 429272, 429269, 429267, 429241, 429226, 429030, 428219, 437085, 437013, 436998, 436915, 436864, 436863, 436838, 436777, 436668, 436663, 436662, 436661, 436660, 436658, 436649, 436648, 436642, 436641, 436596, 436582, 436572, 436542, 436482, 436481, 436479, 436475, 436474, 436473, 436472, 436470, 436458, 436444, 436426, 436422, 436413, 436398, 436390, 436385, 436381, 436379, 436321, 436320, 436319, 436318, 436316, 436314, 436312, 436311, 436310, 436277, 436276, 436250, 436241, 436231, 436226, 436224, 436219, 436203, 436202, 436183, 436178, 436148, 436139, 436138, 436132, 436105, 436095, 436080, 436063, 436050, 436020, 436019, 435982, 435979, 435909, 435882, 435861, 435828, 435822, 435814, 435807, 435788, 435781, 435772, 435713, 435704, 435702, 435697, 435684, 435679, 435665, 435632, 435607, 435600, 435552, 435544, 435531, 435528, 435501, 435493, 435458, 435438, 435423, 435417, 435399, 435396, 435388, 435365, 435357, 435326, 435318, 435308, 435282, 435281, 435264, 435253, 435228, 435205, 435201, 435099, 435098, 435097, 435090, 435026, 435017, 434940, 434891, 434890, 434888, 434885, 434815, 434780, 434765, 434751, 434743, 434742, 434512, 434499, 434486, 434394, 434376, 434362, 434332, 434215, 434089, 434066, 433928, 433914, 433881, 433601, 433569, 433567, 433498, 433225, 432959, 432941, 432731, 432662, 432657, 430731, 430676, 430670, 430666, 430663, 430657, 430551, 430419, 430412, 429746, 429495, 429467, 429369, 429334, 429250, 429238, 429209, 429201, 429173, 429035, 429010, 428868, 428846, 428775, 428761, 428751, 428713, 428706, 428700, 428692, 428238, 428223, 428222, 428192, 422238, 436299, 436077, 436051, 436003, 435932, 435920, 435919, 435918, 435917, 435916, 435912, 435863, 435857, 435840, 435829, 435766, 435765, 435729, 435720, 435658, 435649, 435631, 435617, 435599, 435598, 435591, 435580, 435569, 435566, 435561, 435549, 435539, 435533, 435529, 435524, 435518, 435514, 435513, 435512, 435511, 435506, 435495, 435479, 435475, 435471, 435467, 435456, 435455, 435454, 435453, 435452, 435451, 435450, 435448, 435447, 435446, 435445, 435392, 435391, 435387, 435386, 435300, 435251, 435188, 435174, 435120, 435116, 435112, 435110, 435107, 435102, 435067, 435043, 434998, 434988, 434979, 434850, 434835, 434752, 434720, 434710, 434706, 434703, 434585, 434023, 433902, 433897, 433876, 433746, 433557, 433514, 433244, 432704, 432688, 432678, 432294, 431512, 431480, 431478, 431427, 430297, 429952, 429446, 427850, 427814, 435546, 435542, 435485, 435363, 435362, 435352, 435351, 435350, 435303, 435183, 435117, 435087, 435084, 435002, 434981, 434937, 434900, 434892, 434867, 434846, 434774, 434747, 434746, 434740, 434694, 434640, 434620, 434613, 434572, 434395, 434372, 434301, 434278, 434257, 434236, 434216, 434198, 434197, 434196, 434195, 434194, 434180, 434171, 434170, 434167, 434151, 434136, 434135, 434134, 434063, 433949, 433942, 433911, 433787, 433654, 433643, 433593, 433587, 433585, 433576, 433575, 433472, 433432, 433391, 433348, 433296, 433236, 433228, 433208, 433204, 433016, 432990, 432984, 432755, 432711, 432687, 432677, 432667, 432360, 431982, 431767, 431766, 429863, 428976, 428930, 428854, 427886, 420845, 434785, 434781, 434658, 433991, 433966, 433944, 433781, 433767, 433753, 433657, 433561, 432993, 432988, 432942, 432935, 432933, 432918, 432915, 432696, 431955, 431940, 434561, 434541, 434466, 434407, 434392, 434390, 434386, 434370, 434356, 434329, 434284, 434231, 434218, 434206, 434202, 434186, 434178, 434166, 434158, 434060, 434003, 433979, 433969, 433927, 433926, 433869, 433792, 433791, 433756, 433703, 433570, 433562, 433535, 433521, 433505, 433427, 433426, 433425, 433422, 433353, 433327, 433316, 433304, 433266, 433209, 433154, 433153, 433097, 433063, 433060, 433027, 433022, 433015, 433000, 432997, 432982, 432981, 432980, 432977, 432968, 432967, 432964, 432960, 432928, 432890, 432888, 432887, 432882, 432879, 432878, 432877, 432871, 432858, 432851, 432822, 432800, 432799, 432746, 432739, 432710, 432639, 432599, 432598, 432594, 432586, 432573, 432571, 432564, 432563, 432557, 432541, 432455, 432420, 432370, 432345, 432283, 432277, 432255, 432187, 432171, 432151, 432134, 431951, 431677, 431587, 431420, 431407, 431292, 431154, 431128, 431115, 430725, 430724, 430514, 430511, 430227, 430209, 429630, 429361, 429212, 428888, 428701, 428697, 433788, 433615, 433592, 433578, 433572, 433549, 433548, 433520, 433515, 433404, 433381, 433352, 433347, 433346, 433337, 433123, 433122, 433009, 433007, 432966, 432948, 432940, 432924, 432919, 432912, 432880, 432831, 432732, 432717, 432715, 432656, 432654, 432525, 432468, 432417, 432276, 432266, 432206, 432145, 432141, 431937, 431888, 431876, 431863, 431855, 431850, 431820, 431773, 431731, 431599, 431563, 431410, 431408, 431374, 431304, 431242, 431238, 431111, 430922, 430893, 430892, 430623, 430498, 430496, 430322, 429864, 429842, 428693, 428689, 428685, 428048, 428027, 427944, 427914, 427902, 433351, 433265, 433144, 433043, 432951, 432950, 432947, 432819, 432698, 432692, 432637, 432605, 432592, 432486, 432390, 432304, 432270, 432250, 432247, 432243, 432239, 432234, 432212, 432209, 432181, 432168, 432120, 432069, 432022, 432004, 431943, 431918, 431809, 431646, 431613, 431592, 431482, 431443, 431423, 431422, 431309, 431307, 431259, 431225, 431152, 431120, 431100, 430969, 430912, 430778, 430755, 430739, 430711, 430679, 430627, 430592, 430573, 430568, 430564, 430530, 430492, 430481, 430478, 430474, 430456, 430451, 430446, 430169, 430165, 430154, 430146, 430133, 430132, 430131, 430130, 430129, 430128, 430126, 430125, 429996, 429977, 429976, 429975, 429974, 429972, 429951, 429905, 429894, 429835, 429762, 429700, 429636, 429626, 429601, 429579, 429481, 429462, 429291, 429252, 429251, 429153, 428991, 428987, 428986, 428955, 428954, 428949, 428739, 428714, 428414, 428262, 428260, 428259, 428258, 428257, 428256, 428255, 428243, 428241, 428231, 428221, 428168, 428166, 428165, 428164, 427972, 427815, 426851, 425600, 432853, 432827, 432693, 432449, 432422, 432295, 432272, 432265, 432240, 432238, 432226, 432208, 432200, 432178, 432091, 432058, 432007, 431979, 431941, 431939, 431929, 431892, 431862, 431817, 431806, 431709, 431707, 431523, 431481, 431437, 431432, 431243, 431049, 430999, 430998, 428787, 428709, 428673, 428646, 428645, 428632, 432203, 432202, 432177, 432174, 432110, 432099, 432026, 432025, 431984, 431983, 431949, 431878, 431868, 431712, 431690, 431673, 431640, 431629, 431612, 431593, 431579, 431577, 431574, 431556, 431530, 431520, 431519, 431516, 431503, 431469, 431468, 431465, 431441, 431430, 431395, 431339, 431335, 431330, 431257, 431226, 431206, 431205, 431160, 431159, 431155, 431136, 431135, 431103, 431037, 430989, 430929, 430865, 430850, 430788, 430785, 430723, 430715, 430671, 430640, 430607, 430598, 430536, 430471, 430470, 430450, 430355, 430348, 430331, 430318, 430218, 430201, 430142, 430134, 430086, 429958, 429880, 429830, 429795, 429792, 429777, 429773, 429738, 429694, 429693, 429658, 429613, 429600, 429597, 429552, 429543, 429538, 429508, 429478, 429466, 429429, 429412, 429360, 429351, 429342, 429331, 429323, 429308, 429304, 429285, 429262, 429257, 429234, 429192, 429149, 429148, 428965, 428943, 428937, 428913, 428911, 428795, 428784, 428695, 428662, 428648, 428504, 428441, 428433, 428343, 428273, 428226, 428215, 428214, 428183, 428133, 428118, 428110, 428046, 427481, 427343, 423027, 408727, 431295, 431282, 431276, 431275, 431134, 431124, 431015, 431001, 430978, 430824, 430819, 430804, 430753, 430710, 430694, 430693, 430680, 430654, 430653, 430646, 430630, 430584, 430579, 430559, 430554, 430544, 430543, 430542, 430509, 430495, 430494, 430483, 430482, 430469, 430460, 430455, 430444, 430443, 430441, 430438, 430435, 430428, 430418, 430397, 430387, 430381, 430308, 430260, 430240, 430119, 430057, 430047, 430045, 430038, 430035, 429995, 429981, 429959, 429904, 429881, 429867, 429866, 429807, 429793, 429695, 429685, 429683, 429682, 429674, 429646, 429628, 429625, 429618, 429615, 429614, 429605, 429599, 429595, 429593, 429592, 429582, 429565, 429539, 429451, 429343, 429296, 429279, 429268, 429166, 429003, 428996, 428989, 428952, 428951, 428950, 428947, 428923, 428903, 428898, 428891, 428885, 428880, 428765, 428680, 428263, 428245, 428239, 428236, 428233, 428230, 428225, 428198, 428193, 428120, 427925, 427859, 427778, 427148, 427144, 430722, 430614, 430461, 430401, 430294, 430293, 430184, 428972, 430258, 429817, 429790, 429739, 429714, 429698, 429686, 429677, 429641, 429632, 429621, 429578, 429564, 429563, 429557, 429547, 429454, 429390, 429365, 429356, 429353, 429336, 429319, 429317, 429294, 429278, 429275, 429198, 429197, 428969, 428964, 428917, 428694, 428682, 428586, 428538, 428509, 428375, 428357, 428270, 428265, 428205, 428202, 428185, 428179, 428142, 429263, 429163, 429162, 428984, 428912, 428899, 427900, 427402, 427363, 428927, 428802, 428794, 428793, 428722, 428655, 428616, 428565, 428542, 428522, 428512, 428463, 428254, 428253, 428251, 428250, 428232, 428229, 428228, 428213, 428189, 428181, 428160, 428151, 428134, 428127, 428112, 428108, 428086, 428084, 428083, 428082, 428068, 428066, 428051, 428050, 428049, 428024, 428006, 427951, 427913, 427809, 427776, 427525, 427480, 427476, 427475, 427360, 427243, 426307, 425354, 419822, 403357, 428132, 428129, 427973, 427905, 427848, 427847, 427841, 427792, 427650, 427407, 427404, 427149, 427403, 427267, 427209, 425108, 424829, 419944, 419665, 423405, 424636, 423799, 423798, 423536, 420517, 418400, 418298, 410050, 420189, 409587, 418727, 406440, 417092, 415773, 415976, 415035, 413538 };

            if (cookie == null)
                cookie = AuthenticationHandler.GetCookie();

            for (int i = 0; i < ilist.Length; i++)
            {
                int complaint_id = ilist[i];

                VmStatusChange vmStatusChange = new VmStatusChange();
                DbComplaint complaint = DbComplaint.GetByComplaintId(complaint_id);
                if (complaint.Complaint_Status_Id != 11)
                {
                    vmStatusChange.ComplaintId = complaint_id;
                    vmStatusChange.Complaint_Category = complaint.Complaint_Category;
                    vmStatusChange.Complaint_SubCategory = complaint.Complaint_SubCategory;

                    vmStatusChange.Compaign_Id = 47;
                    vmStatusChange.statusID = 11; //Closed(verified)
                    vmStatusChange.statusChangeComments = "Dear user your complaint has been resolved and marks awarded as per SED E-Transfer policy for details please visit https://sis.punjab.gov.pk/stats";

                    vmStatusChange.VmFeedbackStatus = new VmFeedbackStatus();
                    vmStatusChange.VmFeedbackStatus.feedbackStatusID = 1;
                    vmStatusChange.VmFeedbackStatus.feedbackStatusChangeComments = null;

                    FileUploadHandler.FileValidationStatus s = ChangeStatus(vmStatusChange, null);
                }
            }
            return true;
        }

        public static FileUploadHandler.FileValidationStatus ChangeStatus(VmStatusChange vmStatusChange, HttpFileCollectionBase files)
        {
            FileUploadHandler.FileValidationStatus validationStatus = new FileUploadHandler.FileValidationStatus(Config.AttachmentErrorType.NoError, "");
            int attachedFilesCount = 0;
            bool checkAttachment = true;

            if (cookie == null)
                cookie = AuthenticationHandler.GetCookie();

            if (files != null)
            {
                validationStatus = FileUploadHandler.GetFileValidationStatus(files);
                attachedFilesCount = FileUploadHandler.GetAttachedFileCount(files);
                checkAttachment = (cookie.Role == Config.Roles.Stakeholder && cookie.SubRoles == Config.SubRoles.SDU);
            }

            if (validationStatus.ValidationStatus == Config.AttachmentErrorType.NoError)
            {
                if (attachedFilesCount == 0 && !checkAttachment)
                {
                    validationStatus.ValidationMessage = "Please attach atleast one file to change the status";
                    validationStatus.ValidationStatus = Config.AttachmentErrorType.NoFileAttached;
                    return validationStatus;
                }
                int campaignId = (int)vmStatusChange.Compaign_Id;
                int complaintId = vmStatusChange.ComplaintId;
                int categoryId = (int)vmStatusChange.Complaint_Category;
                int subcategoryId = (int)vmStatusChange.Complaint_SubCategory;
                int statusId = (int)vmStatusChange.statusID;
                DateTime currentDateTime = DateTime.Now;

                float catRetainingHours = 0;
                float? subcatRetainingHours = 0;
                //Config.CategoryType cateogryType = Config.CategoryType.Main;

                subcatRetainingHours = DbComplaintSubType.GetRetainingByComplaintSubTypeId(subcategoryId);

                if (subcatRetainingHours == null) // when subcategory doesnot have retaining hours
                {
                    catRetainingHours = DbComplaintType.GetRetainingHoursByTypeId((int)vmStatusChange.Complaint_Category);
                    //cateogryType = Config.CategoryType.Main;
                }
                else
                {
                    catRetainingHours = (float)subcatRetainingHours;
                    //cateogryType = Config.CategoryType.Sub;
                }

                //DbComplaint dbComplaint = DbComplaint.GetByComplaintId(complaintId); 
                //float catRetainingHours =
                //    DbComplaintType.GetRetainingHoursByTypeId((int) vmStakeholderComplaint.Complaint_Category);
                Dictionary<string, object> paramDict = new Dictionary<string, object>();


                DbComplaint dbComplaint = DbComplaint.GetListByComplaintId(complaintId).First();

                int userHierarchyId = Convert.ToInt32(cookie.Hierarchy_Id);
                int userInnerHierarchyId = Convert.ToInt32(cookie.User_Hierarchy_Id);

                DbSchoolsMapping dbSchools = DbSchoolsMapping.GetSchoolById((int)dbComplaint.TableRowRefId);

                //--------- Old code--------------
                /*
                List<DbAssignmentMatrix> listDbAssignmentMatrix =
                    DbAssignmentMatrix.GetByCampaignIdAndCategoryId(campaignId, categoryId, subcategoryId);

                for (int i = 0; i < listDbAssignmentMatrix.Count; i++)
                {
                    if (Convert.ToInt32(dbSchools.School_Type) == (int) Config.SchoolType.Secondary)
                    {
                        if (listDbAssignmentMatrix[i].ToSourceId > (int) Config.Hierarchy.District)// means tehsil or uc
                        {
                            listDbAssignmentMatrix[i].ToSourceId = (int)Config.Hierarchy.District;
                        }
                    }
                }
                */
                //---------- End Old Code ---------

                //---------- New Custom Code ------------

                int? userCategoryId1 = null;
                int? userCategoryId2 = null;
                int? userCategoryId3 = null;

                List<AssignmentModel> assignmentModelList = null;
                //if (vm.currentComplaintTypeTab == VmAddComplaint.TabComplaint)
                {

                    assignmentModelList =
                        Handler.Complaint.Assignment.AssignmentHandler.GetAssignmnetModelByCampaignCategorySubCategory((int)dbComplaint.Compaign_Id,
                            (int)dbComplaint.Complaint_Category, (int)dbComplaint.Complaint_SubCategory, true, dbSchools.School_Type, null);

                    //------ Custom Code -------

                    List<DbUsers> listDbUsers = Handler.StakeHolder.UsersHandler.GetUsersHierarchyMapping(Convert.ToInt32(dbComplaint.Compaign_Id));
                    Config.Hierarchy hierarchyId = (Config.Hierarchy)assignmentModelList[0].SrcId;
                    int? userHierarchyVal = Convert.ToInt32(assignmentModelList[0].UserSrcId);
                    VmComplaint vmComplaint = new VmComplaint();
                    vmComplaint.Province_Id = dbComplaint.Province_Id;
                    vmComplaint.Division_Id = dbComplaint.Division_Id;
                    vmComplaint.District_Id = dbComplaint.District_Id;
                    vmComplaint.Tehsil_Id = dbComplaint.Tehsil_Id;
                    vmComplaint.UnionCouncil_Id = dbComplaint.UnionCouncil_Id;

                    List<int?> listStatusIds = new List<int?> { (int)Config.ComplaintStatus.PendingReopened };

                    if (listStatusIds.Where(n => n == statusId).FirstOrDefault() != null)
                    {
                        OriginHierarchy originHierarchy =
                            Handler.Business.BlSchool.EvaluateAssignmentMartix(vmComplaint, listDbUsers,
                                assignmentModelList, dbSchools, hierarchyId, userHierarchyVal, ref userCategoryId1,
                                ref userCategoryId2, ref userCategoryId3, 0, null);
                        paramDict.Add("@UserCategoryId1", userCategoryId1);
                        paramDict.Add("@UserCategoryId2", userCategoryId2);

                        paramDict.Add("@Origin_HierarchyId", originHierarchy.OriginHierarchyId);
                        paramDict.Add("@Origin_UserHierarchyId", originHierarchy.OriginUserHierarchyId);
                        paramDict.Add("@Origin_UserCategoryId1", originHierarchy.OriginUserCategoryId1);
                        paramDict.Add("@Origin_UserCategoryId2", originHierarchy.OriginUserCategoryId2);
                        paramDict.Add("@Is_AssignedToOrigin", originHierarchy.IsAssignedToOrigin);
                    }
                    else
                    {
                        paramDict.Add("@UserCategoryId1", dbComplaint.UserCategoryId1);
                        paramDict.Add("@UserCategoryId2", dbComplaint.UserCategoryId2);

                        paramDict.Add("@Origin_HierarchyId", dbComplaint.Origin_HierarchyId);
                        paramDict.Add("@Origin_UserHierarchyId", dbComplaint.Origin_UserHierarchyId);
                        paramDict.Add("@Origin_UserCategoryId1", dbComplaint.Origin_UserCategoryId1);
                        paramDict.Add("@Origin_UserCategoryId2", dbComplaint.Origin_UserCategoryId2);
                        paramDict.Add("@Is_AssignedToOrigin", dbComplaint.Is_AssignedToOrigin);
                    }
                    //--------------------------
                }



                //--------- End new Custom Code ----------


                List<DbAssignmentMatrix> listDbAssignmentMatrix = DbAssignmentMatrix.GetByCampaignIdAndCategoryId(campaignId, categoryId, subcategoryId);

                //List<AssignmentModel> 
                assignmentModelList =
                AssignmentHandler.GetAssignmentModelOnStatusChange2(userHierarchyId, userInnerHierarchyId, dbComplaint,
                    statusId, DateTime.Now, listDbAssignmentMatrix /*assignmentModelList*/, catRetainingHours, true);

                for (int i = 0; i < 10; i++)
                {
                    if (i < assignmentModelList.Count)
                    {
                        paramDict.Add("@Dt" + (i + 1), assignmentModelList[i].Dt.ToDbObj());
                        paramDict.Add("@SrcId" + (i + 1), assignmentModelList[i].SrcId.ToDbObj());
                        paramDict.Add("@UserSrcId" + (i + 1), assignmentModelList[i].UserSrcId.ToDbObj());
                        //paramDict.Add("@SrcId" + (i + 1), assignmentModelList[i].SrcId.ToDbObj());
                    }
                    else
                    {
                        paramDict.Add("@Dt" + (i + 1), (null as object).ToDbObj());
                        paramDict.Add("@SrcId" + (i + 1), (null as object).ToDbObj());
                        paramDict.Add("@UserSrcId" + (i + 1), (null as object).ToDbObj());
                        //paramDict.Add("@SrcId" + (i + 1), (null as object).ToDbObj());
                    }
                }

                paramDict.Add("@ComplaintId", complaintId.ToDbObj());
                paramDict.Add("@StatusId", statusId.ToDbObj());

                paramDict.Add("@Status_ChangedBy", cookie.UserId);
                paramDict.Add("@Status_ChangedBy_Name", cookie.UserName);
                paramDict.Add("@StatusChangedDate_Time", currentDateTime);
                paramDict.Add("@StatusChangedBy_RoleId", Convert.ToInt32(cookie.Role));
                paramDict.Add("@StatusChangedBy_HierarchyId", Convert.ToInt32(cookie.Hierarchy_Id));
                paramDict.Add("@StatusChangedBy_User_HierarchyId", Convert.ToInt32(cookie.User_Hierarchy_Id));
                paramDict.Add("@StatusChanged_Comments", vmStatusChange.statusChangeComments.ToDbObj());

                // ------ adding custom params -----------------

                paramDict.Add("@MaxLevel", assignmentModelList.Count);

                paramDict.Add("@MinSrcId", AssignmentHandler.GetMinSrcId(assignmentModelList));
                paramDict.Add("@MaxSrcId", AssignmentHandler.GetMaxSrcId(assignmentModelList));

                paramDict.Add("@MinUserSrcId", AssignmentHandler.GetMinUserSrcId(assignmentModelList));
                paramDict.Add("@MaxUserSrcId", AssignmentHandler.GetMaxUserSrcId(assignmentModelList));


                paramDict.Add("@MinSrcIdDate", AssignmentHandler.GetMinDate(assignmentModelList));
                paramDict.Add("@MaxSrcIdDate", AssignmentHandler.GetMaxDate(assignmentModelList));

                // ----------- end adding custom params --------


                //string dt = DBHelper.GetSpString("[PITB].[Update_Complaints_Status]",paramDict);
                DBHelper.GetDataTableByStoredProcedure("[PITB].[Update_Complaints_Status]", paramDict)
                    .ToList<VmAgentComplaintListing>();


                DBContextHelperLinq db = new DBContextHelperLinq();

                MakeLastLogOfComplaintStatusInactive(complaintId, db);
                DbComplaintStatusChangeLog dbStatusChangeLog = SaveComplaintStatusInLog(complaintId, statusId,
                    currentDateTime, vmStatusChange.statusChangeComments, db);

                BlNotification.ResetNotification(campaignId, Config.NotificationType.Complaint, Config.NotificationSubType.Launch, complaintId, Config.NotificationStatus.Send);
                db.SaveChanges();

                int statusLogId = dbStatusChangeLog.Id;

                if (files != null)
                    FileUploadHandler.UploadMultipleFiles(files, Config.AttachmentReferenceType.ChangeStatus, Utility.GetComplaintIdStr(campaignId, complaintId),
                        statusLogId, Config.TAG_COMPLAINT_STATUS_CHANGE);

                validationStatus.ValidationMessage = "Complaint " + vmStatusChange.Compaign_Id + "-" + vmStatusChange.ComplaintId +
                       " status changed successfully!! ";





                // Send message on status change
                if (!PermissionHandler.IsPermissionAllowedInCampagin(Config.CampaignPermissions.DontSendMessages))
                {
                    if (statusId == (int)Config.ComplaintStatus.ClosedVerified)
                    {
                        TextMessageHandler.SendMessageOnStatusChange(dbComplaint.Person_Contact,
                            (int)dbComplaint.Compaign_Id, dbComplaint.Id, (int)dbComplaint.Complaint_Category,
                            statusId,
                            vmStatusChange.statusChangeComments);
                    }

                    if (cookie.SubRoles == Config.SubRoles.SDU && statusId == (int)Config.ComplaintStatus.PendingReopened) //  send message to complainant
                    {
                        //string complaintIdStr = Utility.GetComplaintIdStr((int) dbComplaint.Compaign_Id, dbComplaint.Id);
                        //string msg = "Dear Parent/Guardian, \n" +

                        // "Based on your feedback, your Complaint # {0} has been re-opened for resolution by relevant official. \n" +

                        // "Thank you for your feedback on the School Education Helpline (042-111-11-20-20). ";
                        //msg = String.Format(msg, complaintId);

                        //TextMessageHandler.SendMessageToPhoneNo(dbComplaint.Person_Contact, complaintIdStr);

                        SendMessageToComplainant(Config.ComplaintStatus.PendingReopened, dbComplaint.Person_Contact,
                            Utility.GetComplaintIdStr((int)dbComplaint.Compaign_Id, dbComplaint.Id));

                        SendMessageToStakeholder(dbComplaint);
                    }


                }
                if (cookie.SubRoles == Config.SubRoles.SDU && statusId == (int)Config.ComplaintStatus.ClosedVerified) //  Save feedback Status in CNFP Columns
                {
                    if (vmStatusChange != null)
                    {
                        if (vmStatusChange.VmFeedbackStatus != null)
                        {

                            DbComplaint dbComplaint1 = DbComplaint.GetListByComplaintId(complaintId).First();

                            int myVar = (int)vmStatusChange.VmFeedbackStatus.feedbackStatusID;
                            string feedbackComments = vmStatusChange.VmFeedbackStatus.feedbackStatusChangeComments;
                            dbComplaint1.CNFP_Feedback_Id = myVar;
                            dbComplaint1.CNFP_Feedback_Comments = feedbackComments;
                            dbComplaint1.CNFP_Feedback_Value = vmStatusChange.VmFeedbackStatus.ListFeedbackStatus.Where(x => x.Value == myVar.ToString()).FirstOrDefault().Text;
                            DBContextHelperLinq db2 = new DBContextHelperLinq();
                            DbEntityEntry entry = db2.Entry(dbComplaint1);
                            entry.State = System.Data.Entity.EntityState.Modified;
                            db2.SaveChanges();
                            db2.Dispose();
                        }
                    }

                }



                //Push to School Complaint System
                new Thread(delegate ()
                {
                    string url = Config.ApiUrlSchoolComplaintSystem + "/api/public_school_complaint_status";
                    PushStatusToSchoolComplaintSystem(url, complaintId, statusId, Utility.GetAlteredStatus(Convert.ToInt32(campaignId), DbStatus.GetById(statusId).Status));
                }).Start();

                // End push to School Complaint System



                return validationStatus;
            }
            else
            {
                return validationStatus;
            }

        }

        public class RequestModelPushStatus
        {
            public string complaintId { get; set; }

            public int statusId { get; set; }

            public string statusName { get; set; }

            public string apiKey { get; set; }
        }

        public static void PushStatusToSchoolComplaintSystem(string url, int complaintId, int statusId, string statusName)
        {
            //return;
            try
            {
                RequestModelPushStatus requestModelPushStatus = new RequestModelPushStatus();
                requestModelPushStatus.complaintId = complaintId.ToString();
                requestModelPushStatus.statusId = statusId;
                requestModelPushStatus.statusName = statusName;
                requestModelPushStatus.apiKey = Config.ApiKeySchoolComplaintSystem;

                string serializeObj = JsonConvert.SerializeObject(requestModelPushStatus);

                Dictionary<string, string> dictParams = new Dictionary<string, string>();
                dictParams.Add("data", serializeObj);
                //dictParams.Add("compaintId", complaintId);
                //dictParams.Add("statusId", statusId);
                //dictParams.Add("statusName", statusName);
                //dictParams.Add("apiKey", Config.ApiKeySchoolComplaintSystem);



                string postDataStr = Utility.GetUrlEncodedBytes(dictParams);

                var data = Encoding.ASCII.GetBytes(postDataStr);

                var request = (HttpWebRequest)WebRequest.Create(url);


                //string credidential = "HRIMS" + ":" + "cbfdac6008f9cab4083784cbd1874f76618d2a97";
                //string auth = Convert.ToBase64String(Encoding.Default.GetBytes(credidential));
                //request.Headers["Authorization"] = "Basic " + auth;

                //request.Headers["X-API-KEY"] = Config.ApiKEYHR;


                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.ContentLength = data.Length;

                using (var stream = request.GetRequestStream())
                {
                    stream.Write(data, 0, data.Length);
                }

                var response = (HttpWebResponse)request.GetResponse();

                var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
            }
            catch (Exception)
            {

                throw;
            }
        }



        private static void SendMessageToComplainant(Config.ComplaintStatus complaintStatus, string phoneNo, string complaintId)
        {
            //string msg =
            //    "Your feedback for School Education Department has been successfully registered and shared with relevant official. \n";
            //msg = msg + "Complaint ID: " + complaintId + "";

            string msg = "Based on your feedback, your Complaint#: {0} has been re-opened for resolution by relevant official. \n" +

                         "Thank you for your feedback on the School Education Helpline (042-111-11-20-20). ";
            msg = String.Format(msg, complaintId);

            TextMessageHandler.SendMessageToPhoneNo(phoneNo, msg);
        }

        private static void SendMessageToStakeholder(DbComplaint dbComplaint)
        {
            List<string> listStr = new List<string>();
            listStr.Add(Utility.GetComplaintIdStr(dbComplaint));
            listStr.Add(dbComplaint.Complaint_Category_Name.Replace("\r", "").Replace("\n", ""));
            listStr.Add(dbComplaint.Complaint_SubCategory_Name.Replace("\r", "").Replace("\n", ""));
            listStr.Add(dbComplaint.RefField1);
            listStr.Add(dbComplaint.RefField2);
            listStr.Add(((DateTime)dbComplaint.MaxSrcIdDate).ToString("yyyy-MM-dd"));
            string msg =
                "Complaint Re-opened: Based on Complainant’s feedback, Complaint#: {0} has been re-opened for resolution.  \n" +
            "{1}: {2} at {3} {4} \n" +

            "Please resolve by {5} " +

            "To view details, please visit: crm.punjab.gov.pk";
            msg = String.Format(msg, listStr.ToArray());
            TextMessageHandler.PrepareAndSendMessageToStakeholdersOnComplaintLaunch(dbComplaint, msg);
        }


        private static void MakeLastLogOfComplaintStatusInactive(int complaintId, DBContextHelperLinq db)
        {
            //DBContextHelperLinq db = new DBContextHelperLinq();
            DbComplaintStatusChangeLog statusChangeLog = DbComplaintStatusChangeLog.GetLastStatusChangeOfParticularComplaint(complaintId, db);
            if (statusChangeLog != null)
            {
                statusChangeLog.IsCurrentlyActive = false;
                db.DbComplaintStatusChangeLog.Add(statusChangeLog);
                db.Entry(statusChangeLog).State = EntityState.Modified;
                //db.SaveChanges();
            }
        }

        private static DbComplaintStatusChangeLog SaveComplaintStatusInLog(int complaintId, int statusId, DateTime statusSaveDateTime, string comments, DBContextHelperLinq db)
        {
            CMSCookie cookie = AuthenticationHandler.GetCookie();
            DbComplaintStatusChangeLog dbStatusChangeLog = new DbComplaintStatusChangeLog();
            dbStatusChangeLog.StatusChangedByUserId = cookie.UserId;
            dbStatusChangeLog.Complaint_Id = complaintId;
            dbStatusChangeLog.StatusId = statusId;
            dbStatusChangeLog.StatusChangeDateTime = statusSaveDateTime;
            dbStatusChangeLog.Comments = comments;
            dbStatusChangeLog.IsCurrentlyActive = true;
            db.DbComplaintStatusChangeLog.Add(dbStatusChangeLog);
            //db.SaveChanges();
            return dbStatusChangeLog;
        }

        public static List<VmTableStatusHistory> GetComplaintStatusChangeHistoryTableList(int complaintId)
        {
            List<DbComplaintStatusChangeLog> listComplaintsStatusChangeLogs = DbComplaintStatusChangeLog.GetStatusChangeLogsAgainstComplaintId(Convert.ToInt32(complaintId));

            List<VmTableStatusHistory> listTableStatusLogs = new List<VmTableStatusHistory>();
            VmTableStatusHistory tempTableStatusHistory = null;
            DbStatus dbStatus = null;
            DbUsers dbUser = null;
            foreach (DbComplaintStatusChangeLog dbStatusLog in listComplaintsStatusChangeLogs)
            {
                //
                dbStatus = DbStatus.GetById((int)dbStatusLog.StatusId);
                dbUser = DbUsers.GetActiveUser((int)dbStatusLog.StatusChangedByUserId);

                tempTableStatusHistory = new VmTableStatusHistory();
                tempTableStatusHistory.Id = dbStatusLog.Id.ToString();
                tempTableStatusHistory.UserName = dbUser.Name;
                tempTableStatusHistory.UserHierarchy = ((Config.Hierarchy)((int)dbUser.Hierarchy_Id)).ToString();
                tempTableStatusHistory.UserHierarchyValue = BlHierarchy.GetRegionValueAgainstHierarchy((Config.Hierarchy)((int)dbUser.Hierarchy_Id), DbUsers.GetHierarchyIdValueAgainstHierarchyId(dbUser));
                tempTableStatusHistory.Status = dbStatus.Status;
                tempTableStatusHistory.StatusChangeDateTime = Utility.ConvertDateTo_DD_MMMM_YY_H_MM_tt(dbStatusLog.StatusChangeDateTime);
                tempTableStatusHistory.Comments = dbStatusLog.Comments;
                tempTableStatusHistory.IsCurrentlyActive = dbStatusLog.IsCurrentlyActive.ToString();
                listTableStatusLogs.Add(tempTableStatusHistory);
                //tempTableStatusHistory.ComplaintId = complaintId;

                //
                /*

                tempComplaintAssignedTo = new VmTableTransferHistory();
                tempComplaintAssignedTo.UserName = dbComplaintTransferLog.User.Name;

                tempComplaintAssignedTo.AssignedFromMedium = ((Config.Hierarchy)((int)dbComplaintTransferLog.AssignedFromMedium)).ToString();
                tempComplaintAssignedTo.AssignedFromMediumValue = BlHierarchy.GetRegionValueAgainstHierarchy((Config.Hierarchy)((int)dbComplaintTransferLog.AssignedFromMedium), (int)dbComplaintTransferLog.AssignedFromMediumValue);

                tempComplaintAssignedTo.AssignedToMedium = ((Config.Hierarchy)((int)dbComplaintTransferLog.AssignedToMedium)).ToString();
                tempComplaintAssignedTo.AssignedToMediumValue = BlHierarchy.GetRegionValueAgainstHierarchy((Config.Hierarchy)((int)dbComplaintTransferLog.AssignedToMedium), (int)dbComplaintTransferLog.AssignedToMediumValue);

                tempComplaintAssignedTo.AssignedDate = Utility.ConvertDateTo_DD_MMMM_YY_H_MM_tt(dbComplaintTransferLog.AssignmentDateTime.Value);
                tempComplaintAssignedTo.Comment = dbComplaintTransferLog.Comments;

                tempComplaintAssignedTo.IsValid = Utility.GetYesNoFromBool((bool)dbComplaintTransferLog.IsCurrentlyActive);
                */
                //listTableAssignedTo.Add(tempComplaintAssignedTo);
            }
            return listTableStatusLogs;
        }

        public static void ResetComplaintStatus(DBContextHelperLinq db, DbComplaint dbComplaint)
        {
            //db.DbComplaints.Attach(dbComplaint);
            dbComplaint.IsTransferred = true;
            db.Entry(dbComplaint).Property(n => n.IsTransferred).IsModified = true;

            dbComplaint.Status_ChangedBy = null;
            db.Entry(dbComplaint).Property(n => n.Status_ChangedBy).IsModified = true;

            dbComplaint.Status_ChangedBy_Name = null;
            db.Entry(dbComplaint).Property(n => n.Status_ChangedBy_Name).IsModified = true;

            dbComplaint.StatusChangedDate_Time = null;
            db.Entry(dbComplaint).Property(n => n.StatusChangedDate_Time).IsModified = true;

            dbComplaint.StatusChangedBy_RoleId = null;
            db.Entry(dbComplaint).Property(n => n.StatusChangedBy_RoleId).IsModified = true;

            dbComplaint.StatusChangedBy_HierarchyId = null;
            db.Entry(dbComplaint).Property(n => n.StatusChangedBy_HierarchyId).IsModified = true;

            dbComplaint.StatusChangedComments = null;
            db.Entry(dbComplaint).Property(n => n.StatusChangedComments).IsModified = true;

            // Change Status Of Complaint To Pending Fresh
            dbComplaint.Complaint_Status_Id = (int)Config.ComplaintStatus.PendingFresh;
            db.Entry(dbComplaint).Property(n => n.Complaint_Status_Id).IsModified = true;

            dbComplaint.Complaint_Status = Config.StatusDict[(int)Config.ComplaintStatus.PendingFresh];
            db.Entry(dbComplaint).Property(n => n.Complaint_Status).IsModified = true;
        }
    }
}