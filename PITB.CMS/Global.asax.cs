using System.Collections.Generic;
using System.Globalization;
using System.Web;
using PITB.CMS.App_Start;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;
using System;
using System.Linq;
using PITB.CMS_Common;
using PITB.CMS_Common.Handler.License;
using PITB.CMS_Common.Models;
using PITB.CMS_Common.Handler.Business;
using PITB.CMS_Common.Helper.Database;

namespace PITB.CMS
{
    //using PITB.CMS.Helper.Extensions;
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    // visit http://go.microsoft.com/?LinkId=9394801
    public class MvcApplication : HttpApplication
    {
        protected void Application_Start()
        {

            AreaRegistration.RegisterAllAreas();

            WebApiConfig.Register(GlobalConfiguration.Configuration);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);


            CultureInfo culture = (CultureInfo)CultureInfo.CurrentCulture.Clone();
            //culture.DateTimeFormat.ShortDatePattern = "MM-dd-yyyy";
            culture.DateTimeFormat.ShortDatePattern = "yyyy-MM-dd";
            culture.DateTimeFormat.LongTimePattern = "";
            //Thread.CurrentThread.CurrentCulture = culture;
            CultureInfo.DefaultThreadCurrentCulture = culture;
            CultureInfo.DefaultThreadCurrentUICulture = culture;


 //           DBHelper.GetDynamicParameterizedQuery2(@" select name from pitb.users
 //where name='z' ");

            //DBHelper.GetDynamicParameterizedQuery2(@"asdasdasdasdasdasdasdasddsfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdasdassfdgsdffsdf");

            //DBHelper.GetDynamicParameterizedQuery2(@"asd");

            //BlUsers.SendVerificationCodeToEmail(1,"123123w");

            //string asd = DateTime.Now.AddMonths(-6).ToShortDateString();

            // 

            // Start checking dynamic
            /* 
            List<dynamic> listDynamic = new List<dynamic>();
            // dynamic d = new System.Dynamic.ExpandoObject();
             dynamic d = new Dynamic();
             //ExpandoObject d = new System.Dynamic.ExpandoObject();
             //d.
             d.table = "A";
             d.table.style = "asd";
             //d.table.
             d.B = "B";
             d.C = "C";
             //d.Number = 12;
             listDynamic.Add(d);
             //string str = CommonExtension.SerializeObjectToXml(listDynamic);
             //string xml = XmlHelper.ToXmlString(d);
             string xitemmlStr = (d as Dynamic).ConvertToXmlString("root");
             */
            //end checking dynamic

            LicenseHandler.InitializeLicense(Config.LicenseType.ZBulkOperation);
            //BlPolice.UpdateStatusComments();
            //Dictionary<string, List<Dictionary<string, string>>> dict = Utility.ConvertCollonFormatToMultipleDict(
            //    "Hierarchy==5&&UserHierarchy==10::PermissionId=7:Value=7,3||PermissionId=9:Value=1,6,12,13");
            //BlExecutive.SendSmsToExecutives();

            //string pass1 =  Utility.GetAutoGeneratedPassword(10, new List<Config.PasswordProperty>{Config.PasswordProperty.Numbers});
            //string pass2 = Utility.GetAutoGeneratedPassword(10, new List<Config.PasswordProperty> { Config.PasswordProperty.Numbers, Config.PasswordProperty.AlphabetsLowerCase });
            //string pass3 = Utility.GetAutoGeneratedPassword(10, null, Config.PasswordProperty.All);
            //string pass4 = Utility.GetAutoGeneratedPassword(10, null, Config.PasswordProperty.All);
            //string pass5 = Utility.GetAutoGeneratedPassword(10, null, Config.PasswordProperty.All);
            //string pass6 = Utility.GetAutoGeneratedPassword(10, null, Config.PasswordProperty.All);
            //BlSchool.SendMessageToSEAllUsers();
            //BlSchool.ChangePassWordAndSendSMSToUsers();
            //BlSchool.SendPasswordToUserPhone(); 
            //SchoolEducationUsersHandler.FindAllUsersLowerThanCurrentHierarchy(2,47);
            //SchoolEducationUsersHandler.DumpUserWiseSupervisorMapping(2, 47, (int)Config.Hierarchy.UnionCouncil);

            //BlExecutive.SendSmsToExecutives(DateTime.Parse("11/28/2018"), DateTime.Today.AddDays(-1));
            //BlExecutive.SendHierarchyMessages(DateTime.Parse("11/28/2018"), DateTime.Today.AddDays(-1));
            //EditPermissions();
        }

        private void EditPermissions(int campaignId, Config.Hierarchy hierarchyId, int? userHierarchyId)
        {
            using (var db = new DBContextHelperLinq())
            {
                List<DbUsers> users = DbUsers.GetUserAgainstCampaign(campaignId);
                IEnumerable<DbUsers> select = users.Where((x) =>
                {
                    return x.Hierarchy_Id == hierarchyId;
                });
                var ids = select.Select(x => new { Id = x.User_Id, HierarchyId = (int?)x.Hierarchy_Id, UserHierarchyId = x.User_Hierarchy_Id });
                foreach (var item in ids)
                {
                    BIStakeholderAdmin.EditAndAddUserPermission(true, db, item.Id, campaignId, item.HierarchyId, item.UserHierarchyId);
                }
            }
        }
        public void InitializeLicense(string[] licenseKeys)
        {
            //string licenseName = "80;100-BOARD";//... PRO license name
            //string licenseKey = "907EF913D80CB02635FA9D305F006C50";//... PRO license key
            string licenseName = "10;301-ZEESHAN";
            string licenseKey = "F087992508B0126C30D303161766ACF5";//... PRO license key

            if (Z.BulkOperations.LicenseManager.ValidateLicense())
            {
                //Z.BulkOperations

            }
            else
            {
                //Z.BulkOperations.LicenseManager.AddLicense(licenseName, licenseKey);
                Z.BulkOperations.LicenseManager.AddLicense(licenseKeys[0], licenseKeys[1]);
                if (Z.BulkOperations.LicenseManager.ValidateLicense())
                {
                }
            }
        }
        protected void Application_Error()
        {
            // Code that runs when an unhandled error occurs

            Exception exc = Server.GetLastError();

            // Handle HTTP Errors
            if (exc.GetType() == typeof(HttpException))
            {
                //Redirect HTTP errors to HttpError page
                //Server.Transfer("~Views/Shared/_ErrorLayout.cshtml");
            }
        }


        protected void Application_BeginRequest()
        {
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
            Response.Cache.SetNoStore();
        }
    }
}