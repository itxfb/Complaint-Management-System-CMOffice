@using PITB.CMS_Common
<div class="cust-overlay pie-overlay@(ViewBag.divTag)">Loading...</div>
<div class="position-r GraphLevel_@(ViewBag.graphLevel)">
    <div id="@("Graph" + ViewBag.divTag)" style="width:100%; height:400px; margin-top:20px;" graph-name="@(ViewBag.divTag)">


    </div>
</div>
<script type="text/javascript">
    //debugger;
    var campaignId = @(ViewBag.campaignId);

    $(function () {
        debugger;
        LoadData@(ViewBag.divTag)();

    });
    function LoadData@(ViewBag.divTag)()
    {
        $.LoadBarChart@(ViewBag.divTag)();
    }
    $.LoadBarChart@(ViewBag.divTag) = function () {


        var UserList@(ViewBag.divTag) = [];
        var StatusList@(ViewBag.divTag) = [];
        var colorList = [];
        var graphLevel = @(ViewBag.graphLevel);

        if ("@(ViewBag.divTag)" == "other")
            $(".Others-Graphs").html("");

        $(".pie-overlay@(ViewBag.divTag)").fadeIn();
        $.ajax({
            url: "@Url.Action("BarChartCategoryWise", "api/Report")",
            type: "GET",
            data: {
                dateFirst: $("#Piedatepickerlower").val(),
                dateSecond: $("#Piedatepickermax").val(),
                campaignId: campaignId,
                categoryType: @((int)ViewBag.CategoryType),
                categoryId: @(ViewBag.CategoryId)
                @*UserId:@(ViewBag.UserId),
                hierarchyId: @(ViewBag.HierarchyId)*@
                },
            async: false,
            success: function (data) {
                debugger;
                data = $.parseJSON(data);
                var statusList = data.AllStatusList;
                var resultlist=[];
                var resultObj;

                var dict = []; // create an empty array



                if(data.Total !=null)
                {
                    $.each(data.Total.ListUserWiseData, function (idx, obj) {
                        //New Object

                        var UserCount = new Object();
                        
                        obj.Name = obj.Name.trim();
                        var test = obj.Name +"-"+obj.UserId;
                        UserCount.name = (test);

                        //Add in list
                        UserList@(ViewBag.divTag).push(UserCount.name);
                        var isPresent = false;
                        //debugger;
                        $.each(obj.ListVmStatusWiseCount, function (idxa, objSub) {

                            isPresent = false;
                            if(dict.length>0)
                            {
                                for(var obj1 in dict)
                                {
                                    if(dict[obj1].name==objSub.StatusString)
                                    {
                                        dict[obj1].data.push(objSub.Count);
                                        isPresent =true;
                                    }
                                }
                                if(!isPresent)
                                {
                                    var obj2 =  {name:objSub.StatusString, data:[]}
                                    obj2.data.push(objSub.Count);
                                    dict.push(obj2);

                                }
                            }
                            else{
                                var obj3 =  {name:objSub.StatusString, data:[]}
                                obj3.data.push(objSub.Count);
                                dict.push(obj3);
                            }
                            /*$.each(obj.statusList,function (idxb,str)
                            {
                                if(str == objSub)
                                {
                                    resultObj = new Object();
                                    resultObj.Status = objSub.StatusString;
                                }
                            });*/
                            //New Object

                        });


                    });

                    if (data.Total.AllStatusColorList != null) {
                        $.each(data.Total.AllStatusColorList, function (idx, obj) {
                            //debugger;
                            colorList.push(obj);
                        });

                    }
                    //debugger;

                    $(".pie-overlay@(ViewBag.divTag)").fadeOut(1000);
                    // Create the chart
                    Highcharts.setOptions({
                        colors: colorList //['#F86E38', '#85EE66', '#DDDF00', '#24CBE5', '#64E572']
                    });
                    Highcharts.chart('Graph@(ViewBag.divTag)', {
                        chart: {
                            type: 'bar',
                            height: $.GetBarChartHeight(dict)
                        },
                        title: {
                            text: '@(ViewBag.graphName)'
                        },
                        xAxis: {
                            //tickInterval: 6,
                            //allowDecimals: false,
                            categories: UserList@(ViewBag.divTag),  //['Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas']
                            labels: {
                                formatter: function () {
                                    var text = this.value,


                                        //formatted = text.length > 100 ? text.substring(0, 100) + '...' : text;

                                        formatted = text.split('-')[0];
                                    return '<div class="js-ellipse" style="width:150px; overflow:hidden" title="' + text + '">' + formatted + '</div>';
                                },
                                style: {
                                    width: '150px'
                                },
                                useHTML: true
                            }
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Status'
                            }
                        },
                        legend: {
                            reversed: true
                        },
                        plotOptions: {
                            series: {
                                stacking: 'normal',
                                cursor: 'pointer',
                                point: {
                                    events: {
                                        click: function () {
                                            
                                            var temp = this.category.split('-');
                                            var categoryType = @((int)ViewBag.categoryType);

                                            if(categoryType<3)
                                            {
                                                categoryType++;
                                                @*hierarchyId@(ViewBag.graphName)++;
                                                var hierarchyIdToCopy@(ViewBag.graphName) = hierarchyId@(ViewBag.graphName) + 1;
                                                if (hierarchyIdToCopy@(ViewBag.graphName) == parseInt('@((int) Config.Hierarchy.Division)')) {
                                                    hierarchyIdToCopy@(ViewBag.graphName)++;
                                                }
                                                if (hierarchyIdToCopy@(ViewBag.graphName) != parseInt('@((int) Config.Hierarchy.UnionCouncil)')) {*@
                                                clickHandler(campaignId, temp[0], 1, @((int)ViewBag.userId), categoryType, temp[temp.length-1],graphLevel);
                                                //}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        exporting: {
                            chartOptions: {
                                plotOptions: {
                                    series: {
                                        dataLabels: {
                                            enabled: true
                                        }
                                    }
                                }
                            }
                        },
                        series: dict
                        /*[{
                        name: 'Pending',
                        data: [5, 3, 4, 7, 2]
                    }, {
                        name: 'Resolve',
                        data: [2, 2, 3, 2, 1]
                    }, {
                        name: 'Solve',
                        data: [3, 4, 4, 2, 5]
                    }]*/
                    });

                    $('html,body').animate({
                        scrollTop: $(".scroll").offset().top
                    }, 1500);
                }
                else
                {

                    //@ViewBag.UserId
                    @*var from = $("#Piedatepickerlowerother").val();
                    var to = $("#Piedatepickermaxother").val();
                    var userId =  @ViewBag.UserId;

                    LoadGridView( from, to, userId, -1);*@
                }
            }

        });
    }

</script>
