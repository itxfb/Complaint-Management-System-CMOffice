@using System.Web.UI.WebControls
@using PITB.CMS_Common
@using PITB.CMS_Common.Models
@{
//Layout = "~/Views/Shared/SchoolEducation/_SduSchoolEducationStakeholderLayout.cshtml";
}
<style>
    .search-input-text {
        width: 100%;
    }
</style>
<div class="col-md-12 col-xs-12">
    <div class="box box-primary">
        <div class="box-header-blue with-border btn-header">
            <h3 class="box-title"><img style="max-width:40px; max-height: 40px; margin-top: -3px; margin-right: 15px;" src="@ViewBag.LogoUrl">Complaint Listing (Assigned To Me)</h3>
        </div>
        <div class="box-body-white">
            @{
    //int margin = (100 / ((List<SelectListItem>)ViewBag.StatusList).Count) / 2;
            }
            <div class="row">
                @*style="margin-left: @(margin)%" >*@
                @{
                    int count = 0;

                    foreach (SelectListItem listItem in (List<SelectListItem>)ViewBag.StatusList)
                    {

                        <div class="col-md-2">
                            <a class="info-tiles tiles-inverse has-footer dashboardLabelStatusContainer" href="#">
                                <div class="tiles-heading">
                              
                                        <div>@listItem.Text</div>
                                       
                                </div>
                                <div class="tiles-body">
                                    <div id=@(listItem.Value+"_DashboardLabelStatus") class="text-center dashboardLabelStatus">0</div>
                                </div>
                                <div class="tiles-footer">
                                    @*<div class="pull-left">manage orders</div>
                                        <div class="pull-right percent-change">+20.7%</div>*@
                                </div>
                            </a>
                        </div>
                        count++;
                    }

                    <div class="col-md-2">
                        <a class="info-tiles tiles-grape has-footer" href="#">
                            <div class="tiles-heading">
                               
                                    <div>Agent</div>
                                   
                            </div>
                            <div class="tiles-body">
                                <div id=@(Convert.ToInt32(Config.ComplaintSource.Agent) + "_DashboardLabelComplaintSrc") class="text-center">0</div>
                            </div>
                            <div class="tiles-footer">
                            </div>
                        </a>
                    </div>

                    <div class="col-md-2">
                        <a class="info-tiles tiles-grape has-footer" href="#">
                            <div class="tiles-heading">
                               
                                    <div>Mobile</div>
                                    
                            </div>
                            <div class="tiles-body">
                                <div id=@(Convert.ToInt32(Config.ComplaintSource.Mobile) + "_DashboardLabelComplaintSrc") class="text-center">0</div>
                            </div>
                            <div class="tiles-footer">
                            </div>
                        </a>
                    </div>
                }
            </div>



            <div class="col-md-12 col-sm-12">
                <div class="form-group col-md-2 col-xs-12">
                    <div class="col-md-12">
                        <input type="text" id="from" value="@DateTime.Parse("01/08/2018").ToString("yyyy-MM-dd")" placeholder="example: 2015-05-18"
                               class="form-control datepicker" data-original-title="From" data-toggle="tooltip">

                    </div>
                </div>
                <div class="form-group col-md-2 col-sm-12">
                    <div class="col-md-12 col-sm-12">
                        <input type="text" id="to" value="@DateTime.Now.ToString("yyyy-MM-dd")" placeholder="example: 2016-01-05"
                               class="form-control datepicker" data-original-title="To" data-toggle="tooltip">

                    </div>
                </div>
                <div class="form-group col-md-2 col-sm-12">
                    <div class="col-md-12" data-original-title="Campaign(s)" data-toggle="tooltip">
                        @Html.DropDownList("campaignsList", (List<SelectListItem>)ViewBag.Campaigns, new { @class = "form-control", @multiple = "multiple" })
                    </div>

                </div>
                <div class="form-group col-md-2 col-xs-12">
                    <div class="col-md-12" data-original-title="Category" data-toggle="tooltip">
                        @Html.DropDownList("categoryList", (List<SelectListItem>)ViewBag.ComplaintTypeList, new { @class = "form-control", @multiple = "multiple" })
                    </div>

                </div>

                <div class="form-group col-md-2 col-sm-12">
                    <div class="col-md-12" data-original-title="Status" data-toggle="tooltip">
                        @Html.DropDownList("statusList", (List<SelectListItem>)ViewBag.StatusList, new { @class = "form-control", @multiple = "multiple" })
                    </div>

                </div>

                <div class="form-group col-md-2 col-sm-12">
                    <div class="col-md-12" data-original-title="Is Transfered" data-toggle="tooltip">
                        @Html.DropDownList("transferedList", (List<SelectListItem>)ViewBag.ListTransfered, new { @class = "form-control", @multiple = "multiple" })
                    </div>

                </div>

                <div class="form-group col-md-12 col-xs-12 col-sm-12">
                    <div class="col-md-12 col-xs-12 col-sm-12">
                        <div class="pull-right">
                            <button id="FilterBtn" class="btn btn-primary" type="button"><i class="fa fa-filter"></i>&nbsp;Filter</button>
                            <button id="ExcelExportBtn" class="btn btn-success" type="button"><i class="fa fa-file-excel-o"></i>&nbsp;Export</button>
                        </div>
                    </div>
                    @*<div class="col-md-1 col-xs-1 col-sm-1" data-placement="left" data-animation="true" data-toggle="tooltip" title="Your export of data depends upon your selection of filters">
                            <div class="pull-right">
                                <button id="ExcelExportBtn" class="btn btn-success" type="button"><i class="fa fa-file-excel-o"></i>&nbsp;Export</button>
                            </div>
                        </div>*@
                </div>
                @*<div class="form-group col-md-12 col-xs-12">

                        <div class="col-md-12 col-xs-12 col-md-offset-11 col-xs-offset-11" data-placement="left" data-animation="true" data-toggle="tooltip" title="Your export of data depends upon your selection of filters">
                            <button id="ExcelExportBtn" class="btn btn-success" type="button"><i class="fa fa-file-excel-o"></i>&nbsp;Export</button>
                        </div>
                    </div>*@


            </div>
        </div>




        @*<div class="box-body-white">
                <div class="col-md-12 col-sm-12">
                    <div class="form-group col-md-2 col-sm-12">
                        <div class="col-md-12" data-original-title="Is Transfered" data-toggle="tooltip">
                            @Html.DropDownList("transferedList", (List<SelectListItem>)ViewBag.ListTransfered, new { @class = "form-control", @multiple = "multiple" })
                        </div>

                    </div>
                </div>
            </div>*@




        @*<div class="box-body-white">
            <div class="form-group col-md-3" style="padding:20px;">
                <div class="col-md-2">
                    <label>From</label>
                </div>
                <div class="col-md-10">
                    <div class="input-group">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        <input type="text" id="from" value="@DateTime.Now.AddMonths(-6).ToShortDateString()" placeholder="example: 11/21/2015" class="form-control datepicker">
                    </div>
                </div>
            </div>
            <div class="form-group col-md-3" style="padding:20px;">
                <div class="col-md-2">
                    <label>To</label>
                </div>
                <div class="col-md-10">
                    <div class="input-group">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        <input type="text" id="to" value="@DateTime.Now.ToShortDateString()" placeholder="example: 12/31/2015" class="form-control datepicker">
                    </div>
                </div>
            </div>
            <div class="form-group col-md-4" style="padding:20px;">
                <div class="col-md-3">
                    <label>Campaigns</label>
                </div>
                <div class="col-md-9">
                    @Html.DropDownList("campaignList", (List<SelectListItem>)ViewBag.Campaigns, new { @class = "form-control", @multiple = "multiple" })
                    @*<input type="text" id="campaignsList" value="@DateTime.Now.ToShortDateString()" placeholder="example: 12/31/2015" class="form-control">*@

        @*<div class="input-group">
                                <div class="input-group-addon">
                                    <i class="fa fa-rocket"></i>
                                </div>
                            </div>
                    </div>
                </div>
                <div class="col-md-2" style="padding:20px;"><button id="FilterBtnAgent" class="btn btn-primary col-md-12" type="submit">Filter</button></div>
            </div>*@
        <div class="box-body-white">

            <table id="agentListing" width="100%" class="table table-condensed table-hover table-bordered table-striped  responsive" role="grid" aria-describedby="agentListing">
                <thead>
                    <tr role="row" class="tableHeader">
                        <th>Complaint No</th>
                        @*<th>Campaign</th>*@
                        <th>Emis Code</th>
                        <th>School Name</th>
                        @*<th>School Level</th>
            <th>School Type</th>
            <th>School Gender</th>
            <th>Markaz Name</th>


            <th>District</th>
            <th>Tehsil</th>
            <th>Person Name</th>
            <th>Cnic</th>*@
                        <th>Call Date</th>
                        <th>Category</th>
                        <th>Type</th>
                        <th>SubType</th>
                        <th>Verifiable By</th>
                        <th>Status</th>
                        <th>Date Of Action</th>
                        <th>Caller Phone No</th>
                        <th>Overdue Days</th>
                        <th>Follow up</th>
                        <th>Callback Count</th>
                        @*<th>Callback Status</th>
                        <th>Callback Comment</th>*@
                        <th>Reopen Count</th>
                        @*<th>Escalation</th>*@
                        @*<th>Remaining Time</th>*@
                        <th>Action</th>


                        @*<th class="sorting_asc" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Complaint Number: activate to sort column descending" style="width: 180px;">Complaint Number</th>
            <th class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="Complainant's Name: activate to sort column ascending" style="width: 191px;">Complainant's Name</th>
            <th class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="Father/Husband Name: activate to sort column ascending" style="width: 213px;">Father/Husband Name</th>
            <th class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="Gender: activate to sort column ascending" style="width: 77px;">Gender</th>
            <th class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="CNIC Number: activate to sort column ascending" style="width: 138px;">CNIC Number</th>
            <th class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="Cell Number : activate to sort column ascending" style="width: 135px;">Cell Number </th>
            <th style="text-align: center; width: 78px;" class="sorting" tabindex="0" aria-controls="example1" rowspan="1" colspan="1" aria-label="Actions: activate to sort column ascending">Actions</th>*@
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th><input type="text" data-column="0" class="search-input-text"></th>
                        <th><input type="text" data-column="1" class="search-input-text"></th>
                        <th><input type="text" data-column="2" class="search-input-text"></th>
                        <th><input type="text" data-column="3" class="search-input-text"></th>
                        <th><input type="text" data-column="4" class="search-input-text"></th>
                        <th><input type="text" data-column="5" class="search-input-text"></th>
                        <th><input type="text" data-column="6" class="search-input-text"></th>
                        <th><input type="text" data-column="7" class="search-input-text"></th>
                        <th><input type="text" data-column="8" class="search-input-text"></th>
                        <th><input type="text" data-column="9" class="search-input-text"></th>
                        <th><input type="text" data-column="10" class="search-input-text"></th>
                        <th><input type="text" data-column="11" class="search-input-text"></th>
                        <th><input type="text" data-column="12" class="search-input-text"></th>
                        <th><input type="text" data-column="13" class="search-input-text"></th>
                        <th><input type="text" data-column="14" class="search-input-text"></th>
                        <th></th>
                    </tr>


                <tbody></tbody>

            </table>
        </div>

    </div>
</div>
<script type="text/javascript">
    var loadCount = 0;
    //var dashboardStatus = 'DashboardStatus';
    //var dashboardComplaintSrc = 'DashboardComplaintSrc';

    var dashboardStatusLabel = '_DashboardLabelStatus';
    var dashboardComplaintSrcLabel = '_DashboardLabelComplaintSrc';

    $(document).ready(function () {
        sessionStorage.setItem('PreviousUrl', sjcl.encrypt("password", '@ViewBag.PreviousUrl'));
        loadCount ++;
        ResetAllDashboardLabels(dashboardStatusLabel);
        ResetAllDashboardLabels(dashboardComplaintSrcLabel);
        // Setup - add a text input to each footer cell
        //$('#agentListing .filters td').each(function () {
        //    var title = $('#example thead th').eq($(this).index()).text();
        //    $(this).html('<input type="text" placeholder="Search ' + title + '" />');
        //});

        //// DataTable
        //var table = $('#agentListing').DataTable();

        //// Apply the search
        //table.columns().eq(0).each(function (colIdx) {
        //    $('input', $('.filters td')[colIdx]).on('keyup change', function () {
        //        table
        //            .column(colIdx)
        //            .search(this.value)
        //            .draw();
        //    });
        //});
        //$('.search-input-text').on('keyup click', function () {   // for text boxes
        //    var i = $(this).attr('data-column');  // getting column index
        //    var v = $(this).val();  // getting search input value
        //    $('#agentListing').DataTable().columns(i).search(v).draw();
        //});
        //$('.search-input-select').on('keyup click', function () {   // for select box
        //    var i = $(this).attr('data-column');
        //    var v = $(this).val();
        //    $('#agentListing').DataTable().columns(i).search(v).draw();
        //});

    });

    function ResetAllDashboardLabels(dashboardLabel) {
        $("div[id$='"+dashboardLabel+"']").each(function(i, el) {
            //alert('zeeshi');
            //alert(el.id);
            $('#' + el.id).text("0");
            //this.text("0");
            //It'll be an array of elements
        });

    }

    $('.search-input-text').on('keyup', function (e) {

        e.preventDefault();
        var i = $(this).attr('data-column');
        var v = $(this).val();
        $('#agentListing').DataTable().columns(i).search(v).draw();
    });
    @*$('.search-input-select').on('keyup', function () {   // for select box
       var i = $(this).attr('data-column');
      var v = $(this).val();
       $('#agentListing').DataTable().columns(i).search(v).draw();
    });*@

    $(function () {
        $.enableMultiselectOf("campaignList");
        $("#FilterBtn").trigger('click');

        $("#campaignsList").change(function () {
            $.loadDropdown("categoryList", "GetCategoriesOfCampaignOfUser", $("#campaignsList").val());
            $.loadDropdown("statusList", "GetStatusesOfCampaign", $("#campaignsList").val());
            $.enableMultiselectOf("categoryList");
            $.enableMultiselectOf("statusList");
        });


        $.enableMultiselectOf("categoryList");
        $.enableMultiselectOf("transferedList");
    });

    $("#FilterBtn").click(function (e) {
        e.preventDefault();
        @*$.loadAgentListings("@Url.Action("GetStakeholderComplaints","GeneralApi")", $("#from").val(), $("#to").val(), $("#campaignList").val());*@
        LoadTable("@Url.Action("GetStakeholderComplaintsServerSide", "ApiSchoolEducation")", $("#from").val(), $("#to").val(), $("#campaignsList").val(), $("#categoryList").val(), $("#statusList").val(), $("#transferedList").val());
        //SetDashboardLabels(dashboardStatusLabel);
        //SetDashboardLabels(dashboardComplaintSrcLabel);
    });

    function SetDashboardLabels(dashboardLabel) {
        $.ajax({
            dataType: 'json',
            type: 'POST',
            url: '@Url.Action("GetDashboardLabelsStakeholderData", "ApiSchoolEducation")', //'../GeneralApi/GetStakeholderComplaintsServerSide',
            data: { from: $("#from").val(), to: $("#to").val(), campaign: $("#campaignsList").val(), cateogries: $("#categoryList").val(), statuses: $("#statusList").val(), transferedStatus: $("#transferedList").val(), complaintType: @Convert.ToInt32(Config.ComplaintType.Complaint), listingType: @Convert.ToInt32(Config.StakeholderComplaintListingType.AssignedToMe), aoData: aoDataStringify, dashboardType: dashboardLabel },
            success: function(data) {
                //if(dashboardType==dashboardStatus)
                {
                    ResetAllDashboardLabels(dashboardLabel);
                    for(var i = 0; i < data.length; i++) {
                        var idToSet = "#"+data[i].Id + dashboardLabel;
                        $(idToSet).text(""+data[i].Count);
                    }
                }
                /*else if (dashboardType==dashboardComplaintSrc) {
                    ResetAllDashboardLabels(dashboardComplaintSrcLabel);
                }*/
            }
        });
    }

    $("#ExcelExportBtn").click(function(e) {
        e.preventDefault();
        @*window.location = '@Url.Action("ExportStakeHolderData", "generalapi")?startDate=' + $("#from").val() + '&endDate=' + $("#to").val() + '&campaign=' + $("#campaignsList").val() + '&category=' + $("#categoryList").val() + '&status=' + $("#statusList").val() + '&complaintType='+@Convert.ToInt32(Config.ComplaintType.Complaint)+ '&listingType='+@Convert.ToInt32(Config.StakeholderComplaintListingType.AssignedToMe);*@

        $.ajax({
            dataType: 'json',
            type: 'POST',
            url: '@Url.Action("ExportStakeHolderDataToExcel", "ApiSchoolEducation")',//'../GeneralApi/GetStakeholderComplaintsServerSide',
            data: { from: $("#from").val(), to: $("#to").val(), campaign: $("#campaignsList").val(), cateogries: $("#categoryList").val(), statuses: $("#statusList").val() , transferedStatus:$("#transferedList").val(), complaintType: @Convert.ToInt32(Config.ComplaintType.Complaint), listingType:@Convert.ToInt32(Config.StakeholderComplaintListingType.AssignedToMe) , aoData: aoDataStringify },
            success: function (dataId) {
                //alert(dataId);
                window.location = '@Url.Action("ExportStakeHolderData", "ApiSchoolEducation")?dataId=' + dataId;
            }

            /*"success": function callback() {

            },*/
        });
    });


    $( ".dashboardLabelStatusContainer" ).on( "click", function() {
        //var statusId = this.id.split("_")[0];
        //$("#statusList").val(['1', '2']);
        //var spans = $( ".dashboardLabelStatus" );
        var statusId = $(this).find($("div.tiles-body")).find($("div.dashboardLabelStatus"))[0].id.split("_")[0];//.split("_")[0];
        $.enableMultiselectWithAlreadySelectedValues("statusList",statusId);

        $("#FilterBtn").click();
    });

    var table;
    var aoDataStringify;
    function LoadTable(api, from, to, campaign, cateogries, statuses, transferedStatus) {
        //alert(api);
        table = $('#agentListing').dataTable({
            "dom": '<"top"<"col-md-6"l><"col-md-6"f><"col-md-6"i><"col-md-6"p>>',
            "bDestroy": true,
            "iDisplayLength": 50,
            "processing": true,
            "responsive": true,
            "serverSide": true,

            "fnServerData": function (sSource, aoData, fnCallback) {
                aoDataStringify = JSON.stringify(aoData);
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": api,//'../GeneralApi/GetStakeholderComplaintsServerSide',
                    "data": { from: from, to: to, campaign: campaign, cateogries: cateogries, statuses: statuses, transferedStatus:transferedStatus,complaintType: @Convert.ToInt32(Config.ComplaintType.Complaint), listingType:@Convert.ToInt32(Config.StakeholderComplaintListingType.AssignedToMe), aoData: aoDataStringify},
                    "success": fnCallback,
                });
                SetDashboardLabels(dashboardStatusLabel);
                SetDashboardLabels(dashboardComplaintSrcLabel);

                $.ajax({
                    dataType: 'json',
                    type: 'GET',
                    url: '@Url.Action("GetNotifcationList", "generalapi")', //'../GeneralApi/GetStakeholderComplaintsServerSide',
                    data: { notificationType: @((int)Config.NotificationType.Complaint), campaignId: @Utility.GetIntByCommaSepStr(Utility.GetUserFromCookie().Campaigns), notificationStatus: @((int)Config.NotificationStatus.Send) },
                    success: function(data) {
                        //alert(data.Data.Count);
                        //if(dashboardType==dashboardStatus)
                        if (data.Data.Count != 0) {

                            //-----------------------------


                            var rows = table.fnGetNodes();
                            var cells = [];
                            var compId = -1;
                            var compIdToCheck = -1;
                            var isNotChecked = false;

                            /// do stuff
                            for(var j=0;j<rows.length;j++)
                            {
                                $(rows[j]).attr('class', '');
                            }
                            for(var i=0;i<rows.length;i++)
                            {
                                isNotChecked = false;
                                $.each(data.Data.ListNotification, function(k, v) {
                                    //debugger;
                                    compIdToCheck = parseInt(v.TypeId);


                                    // Get HTML of 3rd column (for example)
                                    compId = parseInt($(rows[i]).find("td:eq(0)").html().split('-')[1]);
                                    if (compId == compIdToCheck) {
                                        //alert('172090 found');
                                        isNotChecked = true;
                                    }

                                });
                                //$(rows[i]).attr('class', '');
                                if (isNotChecked) {
                                    $(rows[i]).addClass('RowNotChecked');
                                } else {
                                    $(rows[i]).addClass('RowChecked');
                                }
                            }

                            //var rows = $("#myTable").dataTable().fnGetNodes();

                            
                            //table.column( 0 ).data().each( function ( value, index ) {
                            
                            //} );

                            // $('#Notification').removeClass("hidden");
                            // $('#Notification').text(data.Data.Count);
                        } else {
                            // $('#Notification').addClass("hidden");
                        }
                        //alert("zeeshi = "+data.Data.Count);
                        /*{
                            ResetAllDashboardLabels(dashboardLabel);
                            for(var i = 0; i < data.length; i++) {
                                var idToSet = "#"+data[i].Id + dashboardLabel;
                                $(idToSet).text(""+data[i].Count);
                            }
                        }*/
                        /*else if (dashboardType==dashboardComplaintSrc) {
                            ResetAllDashboardLabels(dashboardComplaintSrcLabel);
                        }*/
                    }
                });
            },

            // Denormalized
            "columns": [
                { "data": "Id" },
                { "data": "RefField1"},
                { "data": "RefField2"},
                //{ "data": "RefField3"},
                //{ "data": "RefField4"},
                //{ "data": "RefField5"},
                //{ "data": "RefField6"},




                //{ "data": "District_Name" },
                //{ "data": "Tehsil_Name" },
                //{ "data": "Person_Name" },
                //{ "data": "Person_Cnic"},
                { "data": "Created_Date" },
                {"data": "Department_Name"},
                { "data": "Complaint_Category_Name" },
                {"data": "Complaint_SubCategory_Name"},
                {"data": "Assigned_To_Name"},
                { "data": "Complaint_Computed_Status" },
                { "data": "StatusChangedDate_Time" },
                { "data": "Person_Contact" },
                { "data": "Computed_Overdue_Days" },
                { "data": "FollowupCount" },
                { "data": "Callback_Count" },
                //{ "data": "Callback_Status" },
                //{ "data": "Callback_Comment" },
                { "data": "StatusReopenedCount" },
                //{ "data": "Complaint_Computed_Hierarchy" },
                //{ "data": "Computed_Remaining_Time_To_Escalate" },
            ],


            aoColumnDefs: [{
                "aTargets": [15],
                "bSearchable": false,
                "bSortable": false,
                "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                    $(nTd).css('text-align', 'center');
                },
                "mData": null,
                "mRender": function (data, type, full) {
                    //debugger;
                    var ExtraColumn = '<td style="text-align:center">' +
                        '<a data-original-title="View details" data-toggle="tooltip" href="javascript:void(0);" " id="' + full.ComplaintId + '" onclick="OpenStakeholderDetailPopup(this.id);"><span class="fa fa-eye"></span></a>';

                    var TransferColumn = '<span>|</span><a data-original-title="Transfer" data-toggle="tooltip" href="javascript:void(0);" " id="' + full.ComplaintId + '" onclick="OpenTransferPopup(this.id);"><span class="glyphicon glyphicon-transfer"></span></a>';

                    @{
                            List<DbPermissionsAssignment> listPermissions = ((List<DbPermissionsAssignment>) ViewBag.ListPermissions);
                            if(listPermissions!=null && listPermissions.Where(n=>n.Permission_Id==(int)Config.Permissions.TransferComplaint).Count()!=0)
                            {
                                <text>
                    ExtraColumn = ExtraColumn + TransferColumn;
                    </text>

                                //ExtraColumn = ExtraColumn + '<span>|</span><a data-original-title="Transfer" data-toggle="tooltip" href="javascript:void(0);" " id="' + full.ComplaintId + '" onclick="OpenTransferPopup(this.id);"><span class="glyphicon glyphicon-transfer"></span></a>';

                            }
                        }


                    ExtraColumn = ExtraColumn + '</td>';
                    return ExtraColumn;

                    @*return '<td style="text-align:center">' +
                        '<a data-original-title="View details" data-toggle="tooltip" href="javascript:void(0);" " id="' + full.ComplaintId + '" onclick="OpenStakeholderDetailPopup(this.id);"><span class="fa fa-eye"></span></a>' +
                        @{
                            List<DbPermissionsAssignment> listPermissions = ((List<DbPermissionsAssignment>) ViewBag.ListPermissions);
                            if(listPermissions!=null && listPermissions.Where(n=>n.Permission_Id==Config.Permissions.TransferComplaint).Count()!=0)
                            {

                            }
                        }
                        '<span>|</span>'+
                        '<a data-original-title="Transfer" data-toggle="tooltip" href="javascript:void(0);" " id="' + full.ComplaintId + '" onclick="OpenTransferPopup(this.id);"><span class="glyphicon glyphicon-transfer"></span></a>' +
                        '</td>';*@
                }
            }],
        });

    }
    function OpenStakeholderDetailPopup(complaintId) {
        //debugger;
        $('#PopupDiv').empty();
        //$('#PopupDiv').load("../Complaint/StakeholderDetail?complaintId=" + complaintId);
        $('#PopupDiv').load("../SchoolEducationComplaint/StakeholderDetail?complaintId=" + complaintId+"&detailType="+@Convert.ToInt32(VmStakeholderComplaintDetail.DetailType.AssignedToMe));
        $('#PopupDiv').modal();
    }

    function OpenTransferPopup(complaintId) {
        debugger;
        $('#PopupDiv').empty();
        $('#PopupDiv').load("../SchoolEducationComplaint/TransferComplaint?complaintId=" + complaintId);
        $('#PopupDiv').modal();
    }



</script>

